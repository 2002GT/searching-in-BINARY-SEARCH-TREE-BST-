 // ---------SEARCHING IN BINARY SEARCH TREE--------

#include "bits/stdc++.h"
using namespace std;

 struct Node{
     int data;
     Node*left;
     Node*right;
     
      Node(int val){
         data = val;
         left= NULL;
         right= NULL;
     }
 };
 
//   ----------search function for BST--------------

    Node*search_in_bst(Node* root, int key){
        // base case------
        
        if(root==NULL){
            return NULL;
        }
        
        if(root->data == key){
            return root;
        }
        
        // data > key--------
        
        if(root->data > key){
            return search_in_bst(root->left, key);
        }
        
        // data < key---------
        
        
    return search_in_bst(root->right ,key);
        
    
    }
 

 int main()
{
   Node*root = new Node(4);
   root->left = new Node(2);
   root->right = new Node(5);
   root->left->left = new Node(1);
   root->left->right = new Node(3);
   root->right->right = new Node(6);
   
  if(search_in_bst(root, 5) == NULL){
      cout<<"key does not exist";
      }
     else{
         cout<<"key exists";
     }

    return 0;
}
